(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[0],{

/***/ "../pkg sync recursive":
/*!*******************!*\
  !*** ../pkg sync ***!
  \*******************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = \"../pkg sync recursive\";\n\n//# sourceURL=webpack:///../pkg_sync?");

/***/ }),

/***/ "../pkg/evolvim_web.js":
/*!*****************************!*\
  !*** ../pkg/evolvim_web.js ***!
  \*****************************/
/*! exports provided: Universe, __wbindgen_object_drop_ref, __wbg_new_3a746f2619705add, __wbg_call_f54d3a6dadb199ca, __wbindgen_jsval_eq, __wbg_self_ac379e780a0d8b94, __wbg_require_6461b1e9a0d7c34a, __wbg_crypto_1e4302b85d4f64a2, __wbindgen_is_undefined, __wbg_getRandomValues_1b4ba144162a5c9e, __wbg_getRandomValues_1ef11e888e5228e9, __wbg_randomFillSync_1b52c8482374c55b, __wbindgen_throw */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Universe\", function() { return Universe; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_object_drop_ref\", function() { return __wbindgen_object_drop_ref; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_new_3a746f2619705add\", function() { return __wbg_new_3a746f2619705add; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_call_f54d3a6dadb199ca\", function() { return __wbg_call_f54d3a6dadb199ca; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_jsval_eq\", function() { return __wbindgen_jsval_eq; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_self_ac379e780a0d8b94\", function() { return __wbg_self_ac379e780a0d8b94; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_require_6461b1e9a0d7c34a\", function() { return __wbg_require_6461b1e9a0d7c34a; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_crypto_1e4302b85d4f64a2\", function() { return __wbg_crypto_1e4302b85d4f64a2; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_is_undefined\", function() { return __wbindgen_is_undefined; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_getRandomValues_1b4ba144162a5c9e\", function() { return __wbg_getRandomValues_1b4ba144162a5c9e; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_getRandomValues_1ef11e888e5228e9\", function() { return __wbg_getRandomValues_1ef11e888e5228e9; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_randomFillSync_1b52c8482374c55b\", function() { return __wbg_randomFillSync_1b52c8482374c55b; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_throw\", function() { return __wbindgen_throw; });\n/* harmony import */ var _evolvim_web_bg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./evolvim_web_bg */ \"../pkg/evolvim_web_bg.wasm\");\n\n\nlet cachegetUint8Memory = null;\nfunction getUint8Memory() {\n    if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== _evolvim_web_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer) {\n        cachegetUint8Memory = new Uint8Array(_evolvim_web_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer);\n    }\n    return cachegetUint8Memory;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArray8ToWasm(arg) {\n    const ptr = _evolvim_web_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_malloc\"](arg.length * 1);\n    getUint8Memory().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8');\n\nfunction getStringFromWasm(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n\nlet cachedGlobalArgumentPtr = null;\nfunction globalArgumentPtr() {\n    if (cachedGlobalArgumentPtr === null) {\n        cachedGlobalArgumentPtr = _evolvim_web_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_global_argument_ptr\"]();\n    }\n    return cachedGlobalArgumentPtr;\n}\n\nlet cachegetUint32Memory = null;\nfunction getUint32Memory() {\n    if (cachegetUint32Memory === null || cachegetUint32Memory.buffer !== _evolvim_web_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer) {\n        cachegetUint32Memory = new Uint32Array(_evolvim_web_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer);\n    }\n    return cachegetUint32Memory;\n}\n\nconst heap = new Array(32);\n\nheap.fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction getArrayU8FromWasm(ptr, len) {\n    return getUint8Memory().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n*/\nclass Universe {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Universe.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        _evolvim_web_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbg_universe_free\"](ptr);\n    }\n    /**\n    * @returns {Universe}\n    */\n    static new() {\n        return Universe.__wrap(_evolvim_web_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_new\"]());\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Universe}\n    */\n    static from_bytes(bytes) {\n        const ptr0 = passArray8ToWasm(bytes);\n        const len0 = WASM_VECTOR_LEN;\n        try {\n            return Universe.__wrap(_evolvim_web_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_from_bytes\"](ptr0, len0));\n\n        } finally {\n            _evolvim_web_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](ptr0, len0 * 1);\n\n        }\n\n    }\n    /**\n    * @returns {void}\n    */\n    prepare_for_drawing() {\n        return _evolvim_web_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_prepare_for_drawing\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    width() {\n        return _evolvim_web_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_width\"](this.ptr) >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    height() {\n        return _evolvim_web_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_height\"](this.ptr) >>> 0;\n    }\n    /**\n    * @returns {void}\n    */\n    update() {\n        return _evolvim_web_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_update\"](this.ptr);\n    }\n    /**\n    * @returns {string}\n    */\n    season() {\n        const retptr = globalArgumentPtr();\n        _evolvim_web_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_season\"](retptr, this.ptr);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        _evolvim_web_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 1);\n        return realRet;\n\n    }\n    /**\n    * @returns {number}\n    */\n    time() {\n        return _evolvim_web_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_time\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    count_creatures() {\n        return _evolvim_web_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_count_creatures\"](this.ptr) >>> 0;\n    }\n    /**\n    * @param {number} x\n    * @param {number} y\n    * @returns {number}\n    */\n    tile_colour_hue(x, y) {\n        return _evolvim_web_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_tile_colour_hue\"](this.ptr, x, y);\n    }\n    /**\n    * @param {number} x\n    * @param {number} y\n    * @returns {number}\n    */\n    tile_colour_saturation(x, y) {\n        return _evolvim_web_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_tile_colour_saturation\"](this.ptr, x, y);\n    }\n    /**\n    * @param {number} x\n    * @param {number} y\n    * @returns {number}\n    */\n    tile_colour_brightness(x, y) {\n        return _evolvim_web_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_tile_colour_brightness\"](this.ptr, x, y);\n    }\n    /**\n    * @param {number} x\n    * @param {number} y\n    * @returns {number}\n    */\n    tile_colour_alpha(x, y) {\n        return _evolvim_web_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_tile_colour_alpha\"](this.ptr, x, y);\n    }\n    /**\n    * @param {number} idx\n    * @returns {number}\n    */\n    creature_px(idx) {\n        return _evolvim_web_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_creature_px\"](this.ptr, idx);\n    }\n    /**\n    * @param {number} idx\n    * @returns {number}\n    */\n    creature_py(idx) {\n        return _evolvim_web_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_creature_py\"](this.ptr, idx);\n    }\n    /**\n    * @param {number} idx\n    * @returns {number}\n    */\n    creature_radius(idx) {\n        return _evolvim_web_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_creature_radius\"](this.ptr, idx);\n    }\n}\n\nconst __wbindgen_object_drop_ref = function(arg0) {\n    takeObject(arg0);\n};\n\nconst __wbg_new_3a746f2619705add = function(arg0, arg1) {\n    let varg0 = getStringFromWasm(arg0, arg1);\n    return addHeapObject(new Function(varg0));\n};\n\nconst __wbg_call_f54d3a6dadb199ca = function(arg0, arg1) {\n    return addHeapObject(getObject(arg0).call(getObject(arg1)));\n};\n\nconst __wbindgen_jsval_eq = function(arg0, arg1) {\n    return getObject(arg0) === getObject(arg1);\n};\n\nconst __wbg_self_ac379e780a0d8b94 = function(arg0) {\n    return addHeapObject(getObject(arg0).self);\n};\n\nconst __wbg_require_6461b1e9a0d7c34a = function(arg0, arg1) {\n    let varg0 = getStringFromWasm(arg0, arg1);\n    return addHeapObject(__webpack_require__(\"../pkg sync recursive\")(varg0));\n};\n\nconst __wbg_crypto_1e4302b85d4f64a2 = function(arg0) {\n    return addHeapObject(getObject(arg0).crypto);\n};\n\nconst __wbindgen_is_undefined = function(arg0) {\n    return getObject(arg0) === undefined;\n};\n\nconst __wbg_getRandomValues_1b4ba144162a5c9e = function(arg0) {\n    return addHeapObject(getObject(arg0).getRandomValues);\n};\n\nconst __wbg_getRandomValues_1ef11e888e5228e9 = function(arg0, arg1, arg2) {\n    let varg1 = getArrayU8FromWasm(arg1, arg2);\n    getObject(arg0).getRandomValues(varg1);\n};\n\nconst __wbg_randomFillSync_1b52c8482374c55b = function(arg0, arg1, arg2) {\n    let varg1 = getArrayU8FromWasm(arg1, arg2);\n    getObject(arg0).randomFillSync(varg1);\n};\n\nconst __wbindgen_throw = function(arg0, arg1) {\n    let varg0 = getStringFromWasm(arg0, arg1);\n    throw new Error(varg0);\n};\n\n\n\n//# sourceURL=webpack:///../pkg/evolvim_web.js?");

/***/ }),

/***/ "../pkg/evolvim_web_bg.wasm":
/*!**********************************!*\
  !*** ../pkg/evolvim_web_bg.wasm ***!
  \**********************************/
/*! exports provided: memory, __wbindgen_global_argument_ptr, __wbg_universe_free, universe_new, universe_from_bytes, universe_prepare_for_drawing, universe_width, universe_height, universe_update, universe_season, universe_time, universe_count_creatures, universe_tile_colour_hue, universe_tile_colour_saturation, universe_tile_colour_brightness, universe_tile_colour_alpha, universe_creature_px, universe_creature_py, universe_creature_radius, __wbindgen_malloc, __wbindgen_free */
/***/ (function(module, exports, __webpack_require__) {

eval("\"use strict\";\n// Instantiate WebAssembly module\nvar wasmExports = __webpack_require__.w[module.i];\n__webpack_require__.r(exports);\n// export exports from WebAssembly module\nfor(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n// exec imports from WebAssembly module (for esm order)\n/* harmony import */ var m0 = __webpack_require__(/*! ./evolvim_web.js */ \"../pkg/evolvim_web.js\");\n\n\n// exec wasm module\nwasmExports[\"__webpack_init__\"]()\n\n//# sourceURL=webpack:///../pkg/evolvim_web_bg.wasm?");

/***/ }),

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var evolvim_web__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! evolvim-web */ \"../pkg/evolvim_web.js\");\n/* harmony import */ var evolvim_web_evolvim_web_bg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! evolvim-web/evolvim_web_bg */ \"../pkg/evolvim_web_bg.wasm\");\n\n\n\nconst info = document.getElementById(\"evolvim-info\");\nconst canvas = document.getElementById(\"evolvim-canvas\");\nconst ctx = canvas.getContext(\"2d\");\nlet universe = evolvim_web__WEBPACK_IMPORTED_MODULE_0__[\"Universe\"].new();\nconst TILE_WIDTH = 20;\nconst width = universe.width();\nconst height = universe.height();\nconsole.log(universe.width(), universe.height());\n\ncanvas.width = width * TILE_WIDTH;\ncanvas.height = height * TILE_WIDTH;\n\nconst drawTiles = () => {\n    ctx.beginPath();\n\n    for (let x = 0; x < width; ++x) {\n        for (let y = 0; y < height; ++y) {\n            const h = universe.tile_colour_hue(x, y);\n            const s = universe.tile_colour_saturation(x, y);\n            const b = universe.tile_colour_brightness(x, y);\n            const a = universe.tile_colour_alpha(x, y);\n\n            ctx.fillStyle = `hsla(${h * 360}, ${s * 100}%, ${b * 100}%, ${a})`;\n            ctx.fillRect(\n                x * TILE_WIDTH,\n                y * TILE_WIDTH,\n                TILE_WIDTH,\n                TILE_WIDTH\n            );\n\n        }\n    }\n\n    for (let i = 0, count = universe.count_creatures(); i < count; ++i) {\n        const x = universe.creature_px(i);\n        const y = universe.creature_py(i);\n        const radius = universe.creature_radius(i);\n        ctx.fillStyle = \"#fff\";\n        ctx.fillRect(\n            x * TILE_WIDTH,\n            y * TILE_WIDTH,\n            3 * radius * TILE_WIDTH,\n            3 * radius * TILE_WIDTH\n        );\n    }\n\n    ctx.stroke();\n};\n\nconst renderLoop = () => {\n    universe.update();\n    universe.prepare_for_drawing();\n    info.textContent =\n`time: ${universe.time()}\nseason: ${universe.season()}\nwidth: ${universe.width()}\nheight: ${universe.height()}\ncreatures: ${universe.count_creatures()}\n`;\n    drawTiles();\n    requestAnimationFrame(renderLoop);\n}\n\nrenderLoop();\n\nconst readFromFile = event => {\n    let input = event.target;\n\n    let reader = new FileReader();\n    reader.onload = function(){\n        let arrayBuffer = reader.result;\n        let byteview = new Uint8Array(arrayBuffer);\n\n        universe = evolvim_web__WEBPACK_IMPORTED_MODULE_0__[\"Universe\"].from_bytes(byteview);\n        console.log(\"Loaded the file!\")\n    };\n\n    console.log(\"Loading file...\");\n    reader.readAsArrayBuffer(input.files[0]);\n}\n\ndocument.getElementById('file-loader').addEventListener(\"change\", readFromFile);\n\n\n//# sourceURL=webpack:///./index.js?");

/***/ })

}]);